import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const descriptions = [
  "Manage code versioning and collaboration using Git.",
  "Deploy and manage containerized applications with Kubernetes.",
  "Automate infrastructure provisioning with Terraform.",
  "Create and collaborate on documentation using Confluence.",
  "Automate the build and deployment process with Jenkins."
];

const typingVariants = {
  hidden: { width: 0 },
  visible: { width: '100%', transition: { duration: 2, ease: 'linear' } }
};

const blinkVariants = {
  visible: { opacity: 1 },
  hidden: { opacity: 0 }
};

const fadeUpVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0, transition: { duration: 0.6 } },
  exit: { opacity: 0, y: -20, transition: { duration: 0.6 } }
};

const Hero: React.FC = () => {
  const [index, setIndex] = useState(0);
  const [text, setText] = React.useState("");
  const [isCursorVisible, setIsCursorVisible] = useState(true);

  useEffect(() => {
    let currentIndex = 0;
    let currentText = "";
    let currentDesc = descriptions[index];
    let typingInterval: NodeJS.Timeout;
    let deleteInterval: NodeJS.Timeout;
    let cursorInterval: NodeJS.Timeout;
    
    const typeText = () => {
      let charIndex = 0;
      typingInterval = setInterval(() => {
        setText(currentText => currentText + currentText.length < currentDescription.length ? currentDescription[charIndex++] : '');
        if (charIndex === currentDescription.length) {
          clearInterval(typingInterval);
          setTimeout(() => deleteText(), 2000);
        }
      }, 100);
    };

    const deleteText = () => {
      deleteInterval = setInterval(() => {
        setText(currentText => {
          if (currentText.length === 0) {
            clearInterval(deleteInterval);
            setIndex((prev) => (prev + 1) % descriptions.length);
            return '';
          }
          return currentText.slice(0, -1);
      });
    }, 50);
    };

    const cursorBlink = () => {
      cursorInterval = setInterval(() => {
        setIsCursorVisible((prev) => !prev);
      }, 500);
    };

    let currentDescription = descriptions[index];
    setText("");
    typeText();
    cursorInterval = setInterval(() => setIsCursorVisible((prev) => !prev), 500);

    return () => {
      clearInterval(typingInterval);
      clearInterval(deleteInterval);
      clearInterval(cursorInterval);
    };
  }, [index]);

  return (
    <div className="h-screen flex flex-col items-center justify-center bg-deep-blue text-white text-center px-4">
      <motion.p
        className="text-accent mb-4 font-mono typing-text"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1 }}
      >
        Hi, my name is
      </motion.p>
      <motion.h1
        className="text-5xl font-bold mb-2 text-light-slate typing-text"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1.5 }}
      >
        Manam Bhatt
      </motion.h1>
      <motion.p
        className="text-xl md:text-2xl mb-4 text-slate typing-text"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 2 }}
      >
        Senior DevOps Engineer | Cloud & Automation Specialist
      </motion.p>
      <div className="h-8 mt-4 relative flex justify-center items-center overflow-hidden">
        <AnimatePresence mode="wait">
          <motion.div
            key={index}
            className="absolute text-lg text-slate-300 font-semibold"
            variants={fadeUpVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            {text}<motion.span
              className="cursor-blink"
              animate={isCursorVisible ? 'visible' : 'hidden'}
            >|</motion.span>
          </motion.div>
        </AnimatePresence>
      </div>
      <motion.button
        className="btn-primary mt-6"
        whileHover={{ scale: 1.05 }}
      >
        Get in Touch
      </motion.button>
    </div>
  );
};

export default Hero;
